name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-release:
    needs: create-release
    name: Build Release - ${{ matrix.platform.os }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      matrix:
        platform:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x86_64
            binary_path: target/release/dup_check
            asset_name: dup_check-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: linux-aarch64
            binary_path: target/release/dup_check
            asset_name: dup_check-linux-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x86_64
            binary_path: target/release/dup_check.exe
            asset_name: dup_check-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x86_64
            binary_path: target/release/dup_check
            asset_name: dup_check-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-aarch64
            binary_path: target/release/dup_check
            asset_name: dup_check-macos-aarch64

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.platform.target }}
          override: true

      - name: Install cross-compilation tools
        if: matrix.platform.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Change to project directory
        run: cd dup_check

      - name: Build binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.platform.target }}
          use-cross: false
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          RUSTFLAGS: "-C target-feature=+crt-static"

      - name: Compress binary
        if: matrix.platform.os != 'windows-latest'
        run: |
          cd target/${{ matrix.platform.target }}/release
          tar czf ../../../../${{ matrix.platform.asset_name }}.tar.gz dup_check
          cd ../../../..

      - name: Compress binary (Windows)
        if: matrix.platform.os == 'windows-latest'
        run: |
          cd target/release
          7z a ../../../${{ matrix.platform.asset_name }}.zip dup_check.exe
          cd ../../..

      - name: Upload Release Asset (Unix)
        if: matrix.platform.os != 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ matrix.platform.asset_name }}.tar.gz
          asset_name: ${{ matrix.platform.asset_name }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Asset (Windows)
        if: matrix.platform.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ matrix.platform.asset_name }}.zip
          asset_name: ${{ matrix.platform.asset_name }}.zip
          asset_content_type: application/zip
